
//chit02: Write a program to implement Parallel Bubble Sort and Merge sort using Open MP. Use existing algorithms and measure the performance of sequential and parallel algorithms.



#include <iostream>
#include <vector>
#include <omp.h>
using namespace std;

// Print array
void printArray(const vector<int>& arr, const string& label) {
    cout << label << ": ";
    for (int val : arr)
        cout << val << " ";
    cout << endl;
}

// Sequential Bubble Sort
void bubbleSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; i++)
        for (int j = 0; j < n - i - 1; j++)
            if (arr[j] > arr[j + 1])
                swap(arr[j], arr[j + 1]);
}

// Parallel Bubble Sort
void parallelBubbleSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n; i++) {
        #pragma omp parallel for
        for (int j = i % 2; j < n - 1; j += 2)
            if (arr[j] > arr[j + 1])
                swap(arr[j], arr[j + 1]);
    }
}

// Merge utility
void merge(vector<int>& arr, int l, int m, int r) {
    vector<int> left(arr.begin() + l, arr.begin() + m + 1);
    vector<int> right(arr.begin() + m + 1, arr.begin() + r + 1);
    int i = 0, j = 0, k = l;
    while (i < left.size() && j < right.size())
        arr[k++] = (left[i] <= right[j]) ? left[i++] : right[j++];
    while (i < left.size()) arr[k++] = left[i++];
    while (j < right.size()) arr[k++] = right[j++];
}

// Sequential Merge Sort
void mergeSort(vector<int>& arr, int l, int r) {
    if (l < r) {
        int m = (l + r) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

// Parallel Merge Sort
void parallelMergeSort(vector<int>& arr, int l, int r, int depth = 0) {
    if (l < r) {
        int m = (l + r) / 2;
        if (depth < 3) {
            #pragma omp parallel sections
            {
                #pragma omp section
                parallelMergeSort(arr, l, m, depth + 1);
                #pragma omp section
                parallelMergeSort(arr, m + 1, r, depth + 1);
            }
        } else {
            mergeSort(arr, l, m);
            mergeSort(arr, m + 1, r);
        }
        merge(arr, l, m, r);
    }
}

int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;

    vector<int> arr(n);
    cout << "Enter " << n << " elements:\n";
    for (int i = 0; i < n; i++)
        cin >> arr[i];

    // -------- BUBBLE SORT --------
    vector<int> seqBubble = arr;
    double t1 = omp_get_wtime();
    bubbleSort(seqBubble);
    double t2 = omp_get_wtime();
    cout << "\n--- Bubble Sort ---\n";
    printArray(seqBubble, "Sorted Result");
    cout << "Sequential Bubble Sort Time: " << (t2 - t1) << " sec\n";

    vector<int> parBubble = arr;
    t1 = omp_get_wtime();
    parallelBubbleSort(parBubble);
    t2 = omp_get_wtime();
    cout << "Parallel Bubble Sort Time:   " << (t2 - t1) << " sec\n";

    // -------- MERGE SORT --------
    vector<int> seqMerge = arr;
    t1 = omp_get_wtime();
    mergeSort(seqMerge, 0, n - 1);
    t2 = omp_get_wtime();
    cout << "\n--- Merge Sort ---\n";
    printArray(seqMerge, "Sorted Result");
    cout << "Sequential Merge Sort Time: " << (t2 - t1) << " sec\n";

    vector<int> parMerge = arr;
    t1 = omp_get_wtime();
    parallelMergeSort(parMerge, 0, n - 1);
    t2 = omp_get_wtime();
    cout << "Parallel Merge Sort Time:   " << (t2 - t1) << " sec\n";

    return 0;
}




------------------------------------------------------------------------------------------------------------------------------

