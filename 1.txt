 Design and implement Parallel Breadth First Search and Depth First Search based on existing algorithms using Open MP. Use a Tree or an undirected graph for BFS and DFS.//

#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>
using namespace std;

// Add edge in undirected graph
void addEdge(vector<vector<int>>& graph, int u, int v) {
    graph[u].push_back(v);
    graph[v].push_back(u); // Since undirected
}

// Parallel BFS using OpenMP
void parallelBFS(vector<vector<int>>& graph, int start) {
    int n = graph.size();
    vector<bool> visited(n, false);
    queue<int> q;

    visited[start] = true;
    q.push(start);

    cout << "\nParallel BFS from node " << start << ": ";

    while (!q.empty()) {
        int levelSize = q.size();
        vector<int> currLevel;

        for (int i = 0; i < levelSize; ++i) {
            int node = q.front(); q.pop();
            cout << node << " ";
            currLevel.push_back(node);
        }

        #pragma omp parallel for
        for (int i = 0; i < currLevel.size(); ++i) {
            int u = currLevel[i];
            for (int v : graph[u]) {
                #pragma omp critical
                {
                    if (!visited[v]) {
                        visited[v] = true;
                        q.push(v);
                    }
                }
            }
        }
    }
    cout << endl;
}

// DFS Helper Function
void dfsHelper(vector<vector<int>>& graph, vector<bool>& visited, int node) {
    visited[node] = true;
    cout << node << " ";

    #pragma omp parallel for
    for (int i = 0; i < graph[node].size(); ++i) {
        int neighbor = graph[node][i];
        #pragma omp critical
        {
            if (!visited[neighbor]) {
                dfsHelper(graph, visited, neighbor);
            }
        }
    }
}

// Parallel DFS using OpenMP
void parallelDFS(vector<vector<int>>& graph, int start) {
    vector<bool> visited(graph.size(), false);
    cout << "\nParallel DFS from node " << start << ": ";
    dfsHelper(graph, visited, start);
    cout << endl;
}

int main() {
    int nodes, edges;
    cout << "Enter number of nodes: ";
    cin >> nodes;

    cout << "Enter number of edges: ";
    cin >> edges;

    // Dynamically create adjacency list
    vector<vector<int>> graph(nodes);

    cout << "Enter edges (u v) for an undirected graph:\n";
    for (int i = 0; i < edges; ++i) {
        int u, v;
        cin >> u >> v;
        addEdge(graph, u, v);
    }

    int startNode;
    cout << "Enter start node for traversal: ";
    cin >> startNode;

    parallelBFS(graph, startNode);
    parallelDFS(graph, startNode);

    return 0;
}




-------------------------------------------------------------------------------------------------------------------------------
Enter number of nodes: 6
Enter number of edges: 5
Enter edges (u v) for an undirected graph:
0 1
0 2
1 3
1 4
2 5
Enter start node for traversal: 0

Parallel BFS from node 0: 0 1 2 3 4 5 

Parallel DFS from node 0: 0 1 3 4 2 5 
